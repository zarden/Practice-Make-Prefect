进程间通信 (IPC)：操作系统为用户提供的几种进程间通信方式

进程间因为每一个进程都有一个虚拟地址空间，在保证了进程独立性的同时，却使得进程间无法直接通信，因此需要操作系统来提供进程间通信方式，并且因为通信场景不同，提供的方式也有多种

数据传输，数据共享，进程控制


System V(罗马5)
进程间通信方式的种类
管道--用于进程间的数据传输
共享内存--用于进程间的数据共享
消息队列--用于进程间的数据传输
信号量--用于实现进程间的控制

管道：
本质：内核中的一块缓冲区--通过半双工通信实现数据传输
半双工（可以选择方向的单向通信）
通过让多个进程都能访问到同一块缓冲区来实现进程间通信。

管道的分类：
匿名管道：这块内核中的缓冲区没有标识，只能用于具有亲缘关系的进程间通信
创建管道时，操作系统会提供两个操作句柄(pipefd[2], pipefd[0]--读, pipefd[1]--写)（文件描述符），其中一个用于从管道读取数据，一个向管道写入数据。
子进程通过复制父进程的方式，获取到管道的操作句柄进而实现访问同一个管道通信。

int pipe(int pipefd[2]);
创建一个匿名管道，向用户(通过参数pipefd)返回管道的操作句柄
pipefd[0]：用于从管道读取数据
pipefd[1]：用于向管道写入数据
返回值：0---成功   -1---失败

特性：
1、若管道中没有数据，则read会阻塞；
2、若管道写满了，则write会阻塞；
--管道自带同步与互斥
同步：对临界资源访问的合理性
互斥：通过保证同一时间只有一个进程能够访问临界资源，保证临界资源访问的安全性
对管道进行数据操作的大小不超过PIPE_BUF=(4096字节)的时候，则保证操作的原子性（一步完成，中间不被打断）
3、若管道所有的写端被关闭, (表示当前没有进程继续写入数据), read读完管道中的数据之后，就不会再阻塞，而是返回0
4、若管道所有读端被关闭,  (表示没有进程读取数据), 继续write会触发异常，程序退出
 
ps-ef-- 命令的默认功能，是将结果写入到标准输出
grep ssh --一直从标准输入读取数据进行过滤












